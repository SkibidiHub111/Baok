local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
while not LocalPlayer or LocalPlayer.Name == "" do task.wait() LocalPlayer = Players.LocalPlayer end

local request = (http_request or request or syn and syn.request or http and http.request)
if not request then return end

local startTick = tick()
getgenv().Status = "üü¢ Running"
local totalFeedCount = 0

local ValidPlants = {
    ["Carrot"] = true, ["Strawberry"] = true, ["Blueberry"] = true,
    ["Tomato"] = true, ["Cauliflower"] = true, ["Avocado"] = true,
    ["Banana"] = true, ["Kiwi"] = true, ["Green Apple"] = true,
    ["Pineapple"] = true, ["Prickly Pear"] = true, ["Rafflesia"] = true
}

local ValidPets = {
    ["Blueberry"] = true, ["Strawberry"] = true, ["Tomato"] = true,
    ["Avocado"] = true, ["Banana"] = true, ["Pineapple"] = true,
    ["Kiwi"] = true, ["Green Apple"] = true, ["Cauliflower"] = true,
    ["Rafflesia"] = true, ["Prickly Pear"] = true
}

local function safeField(name, value)
    local text = "None"
    if typeof(value) == "table" then
        local temp = {}
        for _, v in ipairs(value) do
            table.insert(temp, tostring(v))
        end
        text = table.concat(temp, "\n")
    elseif typeof(value) == "string" or typeof(value) == "number" then
        text = tostring(value)
    end
    if #text > 1000 then
        text = string.sub(text, 1, 1000) .. "..."
    end
    return {
        name = name or "Unknown",
        value = text or "None",
        inline = false
    }
end

local function getBackpackPets()
    local pets, backpack = {}, LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return pets end
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and ValidPets[tool.Name] then
            table.insert(pets, tool.Name)
        end
    end
    return pets
end

local function getFarm()
    for _, farm in ipairs(workspace:WaitForChild("Farm"):GetChildren()) do
        local owner = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Data") and farm.Important.Data:FindFirstChild("Owner")
        if owner and owner.Value == LocalPlayer.Name then
            return farm
        end
    end
    return nil
end

local function getFarmEggs()
    local eggs, farm = {}, getFarm()
    if not farm then return eggs end
    for _, obj in ipairs(farm:GetDescendants()) do
        if obj:IsA("TextLabel") and obj.Text:lower():find("egg") then
            table.insert(eggs, obj.Text)
        end
    end
    return eggs
end

local function getFarmPlants()
    local farm = getFarm()
    if not farm then return {} end
    local count, lines = {}, {}
    for _, obj in ipairs(farm:GetDescendants()) do
        if obj:IsA("Model") and ValidPlants[obj.Name] then
            count[obj.Name] = (count[obj.Name] or 0) + 1
        end
    end
    for name, num in pairs(count) do
        table.insert(lines, name .. " x" .. num)
    end
    table.sort(lines)
    return lines
end

local function sendWebhook(title, fields)
    local cfg = getgenv().Config and getgenv().Config["Webhook"]
    if not cfg or not cfg["Enabled"] or not cfg["Url"] or cfg["Url"] == "" then return end
    local payload = {
        username = "Banana Logger üçå",
        embeds = {{
            title = title,
            color = 65280,
            fields = fields,
            footer = { text = "Banana Auto Logger" }
        }}
    }
    local headers = { ["Content-Type"] = "application/json" }
    local body = HttpService:JSONEncode(payload)
    local success, result = pcall(function()
        return request({
            Url = cfg["Url"],
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)
end

task.spawn(function()
    local cfg = getgenv().Config and getgenv().Config["Webhook"]
    if cfg and cfg["Webhook Profile"] then
        sendWebhook("üìä Farm Status", {
            { name = "üë§ User", value = LocalPlayer.Name, inline = true },
            { name = "‚è≥ Uptime", value = math.floor((tick() - startTick)/60) .. " mins", inline = true },
            safeField("üì¶ Pets", getBackpackPets()),
            safeField("ü•ö Eggs", getFarmEggs()),
            safeField("üåø Plants", getFarmPlants()),
            { name = "üìå Status", value = getgenv().Status or "üü° Unknown", inline = false }
        })
    end
    while true do
        local delay = (cfg and cfg["Delay"]) or 1
        task.wait(delay * 60)
        if cfg and cfg["Webhook Profile"] then
            sendWebhook("üìä Farm Status", {
                { name = "üë§ User", value = LocalPlayer.Name, inline = true },
                { name = "‚è≥ Uptime", value = math.floor((tick() - startTick)/60) .. " mins", inline = true },
                safeField("üì¶ Pets", getBackpackPets()),
                safeField("ü•ö Eggs", getFarmEggs()),
                safeField("üåø Plants", getFarmPlants()),
                { name = "üìå Status", value = getgenv().Status or "üü° Unknown", inline = false }
            })
        end
    end
end)

task.spawn(function()
    local lastEggs = {}
    while true do
        local cfg = getgenv().Config and getgenv().Config["Webhook"]
        if cfg and cfg["Webhook Collect Egg"] then
            local eggs = getFarmEggs()
            local changed = false
            for _, egg in ipairs(eggs) do
                if not table.find(lastEggs, egg) then
                    changed = true
                    break
                end
            end
            if changed then
                sendWebhook("ü•ö New Egg Planted", {
                    safeField("Detected", eggs)
                })
                lastEggs = eggs
            end
        end
        task.wait(10)
    end
end)

task.spawn(function()
    local lastPets = {}
    while true do
        local cfg = getgenv().Config and getgenv().Config["Webhook"]
        if cfg and cfg["Webhook Pet"] then
            local pets = getBackpackPets()
            local newPets = {}
            for _, pet in ipairs(pets) do
                if not table.find(lastPets, pet) then
                    table.insert(newPets, pet)
                end
            end
            if #newPets > 0 then
                sendWebhook("üêæ New Pet Hatched", {
                    safeField("Backpack", newPets)
                })
                lastPets = pets
            end
        end
        task.wait(10)
    end
end)

task.spawn(function()
    local lastFeed = 0
    while true do
        local cfg = getgenv().Config and getgenv().Config["Webhook"]
        if cfg and cfg["Webhook Feed Pet"] and totalFeedCount > lastFeed then
            sendWebhook("üçΩÔ∏è Pet Fed", {
                { name = "New Feeds", value = tostring(totalFeedCount - lastFeed), inline = true },
                { name = "Total Feeds", value = tostring(totalFeedCount), inline = true }
            })
            lastFeed = totalFeedCount
        end
        task.wait(10)
    end
end)
